# Billing, Accounting & Invoicing Service — REST API surface

Nice — below is a comprehensive, focused RESTful API design for a **Billing, Accounting & Invoicing** service for an eCommerce platform. It includes *only* endpoints relevant to billing, accounts receivable, invoices, credit notes, payments/reconciliation, subscriptions & recurring billing (billing-owned concerns only), aging/AR, GL/journals, tax/compliance, dunning/collections, statements, exports/connectors, webhooks and admin/settings. I **do not** include product, cart, payment-gateway internal APIs, order CRUD, inventory, or pricing endpoints (those belong to other services and are referenced here by IDs).

---

## Conventions (applies to all endpoints)

* Base path: `https://api.example.com/v1/billing`
* Auth: `Authorization: Bearer <token>` (OAuth2/JWT). Tenant via `X-Tenant-ID` header or tenant-scoped paths `/v1/{tenantId}/billing`.
* Content type: `application/json`. Bulk uploads accept NDJSON / multipart or S3 pointer.
* Pagination: `page`/`limit` or cursor (`cursor`, `limit`).
* Common query params: `from`, `to`, `status`, `currency`, `customer_id`, `invoice_id`, `page`, `limit`, `sort`.
* Idempotency: mutation endpoints accept `Idempotency-Key`.
* Responses: `200 OK`, `201 Created`, `202 Accepted` (async job), `204 No Content`, `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `404 Not Found`, `409 Conflict`, `422 Unprocessable Entity`, `429 Too Many Requests`, `500 Server Error`.
* Money fields: include `amount` (integer minor units) + `currency` (ISO 4217) and an optional `display_amount` decimal for UI convenience. Always return `balance` and `due_date` where relevant.

---

# 1 — Customers / Billing accounts

Canonical customer/billing account records (separate from user profile service).

* `GET /v1/billing/customers` — list billing accounts (filters: `status`, `segment`, `email`).
* `POST /v1/billing/customers` — create billing account. Body: `{ "name","email","billing_address", "tax_id", "currency","payment_terms":"net30|due_on_receipt|prepaid", "account_code" }`.
* `GET /v1/billing/customers/{customerId}` — retrieve customer billing profile (balances, payment methods summary, delinquency).
* `PATCH /v1/billing/customers/{customerId}` — partial update (billing address, payment terms, tax settings).
* `DELETE /v1/billing/customers/{customerId}` — soft-delete; `hard=true` for permanent (admin).
* `GET /v1/billing/customers/{customerId}/balance` — current outstanding balance, aging buckets.
* `GET /v1/billing/customers/{customerId}/statements` — list statements.
* `POST /v1/billing/customers/{customerId}/notes` — add internal billing memo.

---

# 2 — Invoices (creation, preview, lifecycle)

Create, preview, deliver and manage invoices (one-time & generated by recurring/cycle jobs).

* `POST /v1/billing/invoices` — create invoice (draft or immediately finalized). Body: `{ "customer_id","currency","due_date","items":[{ "description","sku","quantity","unit_price","taxes":[...] }],"metadata","terms" }` → returns invoice with `status: draft|issued|paid|partially_paid|voided|written_off`.
* `POST /v1/billing/invoices/preview` — generate invoice preview (no persistence) used by UIs and quoting.
* `GET /v1/billing/invoices` — list invoices (filters: `status`, `customer_id`, `from`, `to`, `min_amount`, `overdue=true`).
* `GET /v1/billing/invoices/{invoiceId}` — retrieve invoice, line-level detail, tax lines, payment schedule, receipts, attached documents.
* `PATCH /v1/billing/invoices/{invoiceId}` — edit invoice (allowed only while in `draft` or per tenant policy). Use optimistic concurrency.
* `POST /v1/billing/invoices/{invoiceId}/finalize` — lock & issue invoice (triggers PDF generation, delivery, GL posting).
* `POST /v1/billing/invoices/{invoiceId}/send` — email/send invoice (accepts `channels:[email,erp,sftp]` and `template_id`).
* `POST /v1/billing/invoices/{invoiceId}/void` — void/cancel invoice (creates complementary accounting entries).
* `POST /v1/billing/invoices/{invoiceId}/writeoff` — write off remaining balance (creates write-off journal).
* `GET /v1/billing/invoices/{invoiceId}/pdf` — retrieve canonical PDF (stored/or on-the-fly).
* `GET /v1/billing/invoices/{invoiceId}/history` — audit of changes and events.
* `POST /v1/billing/invoices/bulk` — bulk create/import invoices (NDJSON/S3) — async job -> job id.
* `POST /v1/billing/invoices/{invoiceId}/remind` — trigger payment reminder (email/SMS).

---

# 3 — Recurring billing / Subscriptions / Billing cycles

If billing owns recurring subscriptions; endpoints to create subscription plans and manage subscriptions / cycles.

* `GET /v1/billing/plans` — list billing plans / recurring pricing definitions.
* `POST /v1/billing/plans` — create plan `{ "code","name","interval":"monthly|yearly","amount","currency","trial_period_days","billing_day","metadata" }`.
* `GET /v1/billing/plans/{planId}` / `PATCH` / `DELETE`.
* `POST /v1/billing/subscriptions` — create subscription for customer: `{ "customer_id","plan_id","start_date","quantity","billing_cycle_anchor","trial":true,"metadata" }` → returns subscription id and initial invoice preview.
* `GET /v1/billing/subscriptions` — list subscriptions (filter by `customer_id`, `status`).
* `GET /v1/billing/subscriptions/{subscriptionId}` — retrieve (status: `active|past_due|cancelled|paused|trialing`).
* `PATCH /v1/billing/subscriptions/{subscriptionId}` — change plan/quantity/proration behavior.
* `POST /v1/billing/subscriptions/{subscriptionId}/cancel` — cancel subscription (at period end or immediately).
* `POST /v1/billing/subscriptions/{subscriptionId}/pause` / `/resume`.
* `POST /v1/billing/subscriptions/{subscriptionId}/invoice-now` — generate invoice outside cycle.
* `GET /v1/billing/subscriptions/{subscriptionId}/invoices` — list invoices generated for subscription.
* `GET /v1/billing/recurring/cycles` — view scheduled billing runs (next run date, counts).
* `POST /v1/billing/recurring/run` — manual trigger of recurring billing for given date/range (async job id).
* `GET /v1/billing/recurring/jobs/{jobId}` — job status for runs/backfill.

---

# 4 — Usage-based / Metered billing

Metered usage ingestion, rating and invoicing.

* `POST /v1/billing/usage` — submit usage record(s): `{ "customer_id","subscription_id","metric":"api_calls","quantity", "timestamp","dimensions" }` (accepts NDJSON / bulk).
* `GET /v1/billing/usage` — query usage (filters).
* `POST /v1/billing/usage/ingest/bulk` — async bulk ingestion (S3 pointer) -> job id.
* `POST /v1/billing/usage/aggregate` — create aggregated rated usage for billing period (async job).
* `GET /v1/billing/usage/preview-invoice` — preview invoice for given usage window.
* `POST /v1/billing/usage/adjust` — correct usage record (reason required) — creates adjustment entry.

---

# 5 — Payments & Receipts (recording, reconciliation)

The payments gateway/service may be separate; these endpoints record and reconcile payments, refunds and chargebacks.

* `POST /v1/billing/payments` — record an incoming payment (source: payment\_gateway\_id or manual). Body: `{ "customer_id","invoice_id", "amount","currency","paid_at","payment_method":"card|bank_transfer|cash|check","reference":"pg_txn_123","metadata" }` → creates receipt and applies to invoice (partial or full).
* `GET /v1/billing/payments` — list payments (filter by customer, invoice, date, method).
* `GET /v1/billing/payments/{paymentId}` — details and applied allocations.
* `POST /v1/billing/payments/{paymentId}/refund` — issue refund (partial or full) — returns refund id.
* `GET /v1/billing/refunds/{refundId}` — refund details and status.
* `POST /v1/billing/payments/{paymentId}/allocate` — allocate/unallocate payment to one or more invoices (manual reconciliation).
* `POST /v1/billing/payments/reconcile` — auto-reconcile a batch (match by reference/amount) — returns reconciliation report job id.
* `GET /v1/billing/reconciliations/{id}` — view reconciliation report (matches, unmatched items).
* `POST /v1/billing/chargebacks` — record chargebacks/disputes and link to payment/invoice; create dispute workflow.
* `GET /v1/billing/chargebacks` — list disputes & statuses.

---

# 6 — Credit notes, adjustments & credit memos

Issue credit for returns, adjustments or overbilling.

* `POST /v1/billing/credit-notes` — create credit note linked to invoice: `{ "invoice_id","customer_id","amount","reason","apply_to_invoice":true }` → creates credit record and optionally applies to invoice or customer balance.
* `GET /v1/billing/credit-notes` / `GET /v1/billing/credit-notes/{id}`.
* `POST /v1/billing/credit-notes/{id}/apply` — apply credit to invoices or customer account.
* `POST /v1/billing/credit-notes/{id}/void`.

---

# 7 — Taxes & compliance (VAT, GST, e-invoicing)

Interfaces for tax calculation and tax reporting — integration points to Tax Service and e-invoicing.

* `POST /v1/billing/tax/calculate` — calculate taxes for invoice preview or invoice line items: accepts address, tax\_id, items, returns tax lines per jurisdiction.
* `GET /v1/billing/tax/rates?country=...&region=...` — list applicable tax rates (cached).
* `POST /v1/billing/tax/register` — register invoice with external tax provider (for EU OSS/localization) — returns provider id.
* `POST /v1/billing/invoices/{invoiceId}/e-invoice/send` — send certified e-invoice to government/peppol endpoint (if required).
* `GET /v1/billing/tax/reports` — generate tax report (period, jurisdiction) — async job -> job id.
* `POST /v1/billing/tax/adjust` — tax adjustment and audit entry.

---

# 8 — Accounts receivable & collections (dunning)

Aging, dunning rules, automated collections workflows and manual collections actions.

* `GET /v1/billing/ar/aging` — AR aging buckets per customer (30/60/90+).
* `GET /v1/billing/ar/overdue` — list overdue invoices/customers (filter by bucket).
* `POST /v1/billing/dunning/rules` — create dunning schedule: `{ "name","steps":[{ "days_after_due":7,"action":"email|sms|hold_services","template_id":"t1" }], "escalation":"case" }`.
* `GET /v1/billing/dunning/rules` / `PATCH` / `DELETE`.
* `POST /v1/billing/dunning/run` — run dunning for date/range (async job id).
* `GET /v1/billing/dunning/jobs/{jobId}` — status & results.
* `POST /v1/billing/collections/{customerId}/action` — manual action (call, escalate to agency, place hold).
* `GET /v1/billing/collections/cases` — list collection cases, history, and resolution.

---

# 9 — GL / Journals / Accounting exports

Create journal entries, reconcile GL balances, and export to accounting systems (Xero, QuickBooks, ERP).

* `POST /v1/billing/journals` — create journal entry manually or via invoice finalization. Body: `{ "date","entries":[{ "account_code","debit","credit","description","source_ref" }],"metadata" }`.
* `GET /v1/billing/journals` — list journals (filter by account\_code, period).
* `GET /v1/billing/journals/{journalId}` — view journal & attached invoices/payments.
* `POST /v1/billing/exports/accounting` — export journals/invoices/payments to external accounting system: `{ "format":"xero|qbo|csv","date_range","destination":"s3://...","mapping":{...} }` → job id.
* `GET /v1/billing/exports/accounting/{jobId}` — download / status.
* `POST /v1/billing/ledger/sync` — sync balances to ERP (idempotent job).
* `GET /v1/billing/ledger/balances` — trial balance / AR / revenue by GL account.
* `POST /v1/billing/reconcile/gl` — perform GL-level reconciliation (async).

---

# 10 — Reports, invoices & statement exports

Accounting & business reports, customer statements.

* `GET /v1/billing/reports` — list report templates (AR aging, revenue recognition, realized revenue).
* `POST /v1/billing/reports/run` — run a report: `{ "report":"revenue_by_month","period":{"from","to"},"group_by":["product","region"] }` → job id and downloadable file.
* `GET /v1/billing/reports/{jobId}` — status & result.
* `POST /v1/billing/customers/{customerId}/statement` — generate statement of account (PDF) for given period.
* `GET /v1/billing/statements/{id}` — download.

---

# 11 — Refunds, adjustments & disputes

Manage refund workflows and dispute lifecycle.

* `POST /v1/billing/refunds` — create refund (link to payment & invoice); triggers GL entries. Body: `{ "payment_id","invoice_id","amount","reason","method" }`.
* `GET /v1/billing/refunds` / `GET /v1/billing/refunds/{id}`.
* `POST /v1/billing/disputes` — start dispute (chargeback) workflow; attach evidence, communication history.
* `GET /v1/billing/disputes/{id}` / `PATCH` / `POST /v1/billing/disputes/{id}/resolve`.

---

# 12 — Webhooks & events

Notify other services (order, accounting, CRM) about billing events.

* `GET /v1/billing/webhooks` — list webhooks.
* `POST /v1/billing/webhooks` `{ "url","events":[ "invoice.created","invoice.paid","payment.failed","credit_note.issued","subscription.cancelled" ], "secret" }`.
* `DELETE /v1/billing/webhooks/{id}`.
* `POST /v1/billing/webhooks/test` — send test payload.

Event payloads include `before`/`after` financial amounts and correlation ids.

---

# 13 — Settings, taxes & payment routing

Tenant-level billing configuration and connectors.

* `GET /v1/billing/settings` — show tenant settings: default currency, default payment\_terms, rounding rules, revenue\_recognition\_policy.
* `PATCH /v1/billing/settings` — update.
* `GET /v1/billing/payment-methods` — supported payment methods and gateway mappings.
* `POST /v1/billing/gateways` — configure external payment gateway connectors (auth stored securely; separate payment service may own actual transactions).
* `GET /v1/billing/gateways/{id}/status`.
* `POST /v1/billing/tax-providers` — configure external tax services (Avalara, TaxJar, etc.).
* `GET /v1/billing/compliance/countries` — list e-invoicing/tax compliance requirements per country.

---

# 14 — Audit logs, permissions & security

Track who did what, and manage billing-specific API keys and roles.

* `GET /v1/billing/audit` — audit trail for invoices, journals and configuration. Filters: `actor_id`, `action`, `target_id`, `from`, `to`.
* `GET /v1/billing/audit/{id}`.
* `GET /v1/billing/keys` / `POST /v1/billing/keys` — create API keys for CRM/ERP connectors (scoped).
* `DELETE /v1/billing/keys/{id}`.
* `GET /v1/billing/roles` / `POST /v1/billing/roles` — billing RBAC (billing\_admin, collections\_agent, billing\_reader).

---

# 15 — Bulk / import / backfill / jobs

Mass ingestion and backfills (invoices, payments, usage, journal entries).

* `POST /v1/billing/imports` — start import job (invoices, payments, journals): `{ "type":"invoices|payments|usage|journals","source":"s3://...","mapping":{...},"mode":"upsert|replace" }` → job id.
* `GET /v1/billing/imports/{jobId}` — import status / error report.
* `POST /v1/billing/jobs/{jobId}/cancel`.
* `GET /v1/billing/jobs` — list jobs.

---

# 16 — Health, metrics & monitoring

Operational endpoints for SRE & finance ops.

* `GET /v1/billing/health` — subsystems (db, job queue, pdf generator, connector workers).
* `GET /v1/billing/metrics` — service metrics: invoices/sec, payment latency, reconciliation success rate, job queue depth.
* `GET /v1/billing/sla` — billing SLA / runbook links.

---

# 17 — Example invoice resource (canonical)

```json
{
  "id":"inv_0001",
  "customer_id":"cust_123",
  "status":"issued",
  "currency":"GBP",
  "issue_date":"2025-08-29",
  "due_date":"2025-09-28",
  "subtotal": 100000,           // minor units (pence)
  "tax_total": 20000,
  "discount_total": 5000,
  "total": 115000,
  "balance": 115000,            // outstanding
  "lines":[
    { "id":"line_1","description":"Monthly subscription","sku":"SUB-1","quantity":1,"unit_price":100000,"taxes":[{"jurisdiction":"GB","amount":20000}] }
  ],
  "payments":[ { "payment_id":"pay_1","amount":0,"applied_at":null } ],
  "attachments":[ { "id":"pdf_1","url":"https://.../inv_0001.pdf" } ],
  "metadata": { "order_ref":"order_999" },
  "created_at":"2025-08-29T12:00:00Z",
  "updated_at":"2025-08-29T12:05:00Z",
  "posted_to_gl": true,
  "journal_entry_id":"jrnl_2025_08_29_1"
}
```

---

# Design considerations & best practices (brief)

* **Single source of truth for AR**: Billing service must own invoices, receivables, credit notes and GL posting. Other services (orders, payments) integrate via secure events/webhooks.
* **Idempotency & atomic redemptions/receipts**: All payment recording and allocation operations must be idempotent and transactional to prevent duplicate receipts or double-write to GL. Accept `Idempotency-Key`.
* **Async heavy ops**: bulk imports, recurring runs, reconciliation and exports should return job IDs and provide detailed error reports.
* **Separation of transaction vs. settlement**: Payment execution may be handled by payment gateway service; this service records settlements/receipts and reconciles.
* **Audit & compliance**: Keep immutable audit trails for invoices, tax registrations, e-invoice submissions and GL postings. Support export for auditors.
* **Multi-currency & FX**: Store amounts in minor units, record FX rates & effective timestamps for cross-currency transactions and GL entries.
* **Revenue recognition**: Provide hooks or basic recognition schedules; for complex recognition integrate with Finance/ERP. Post journal entries when invoices finalize.
* **Dunning & collections workflow**: Automate first-line dunning, but keep manual escalation endpoints and case management.
* **GL integration**: Provide configurable mapping from invoice/payment events to GL account codes and hit accounting exports (Xero/QBO/ERP).
* **Reconciliation & matching**: Provide robust matching heuristics (reference, amount, date) and manual reconciliation tools for edge cases.
* **Security**: Sensitive payment data managed by PCI-compliant services — billing service stores references only. Tight RBAC for write operations.
* **Observability**: Metrics for invoice generation latency, payment apply latency, reconciliation success, and runbook links for failures.

---

If you’d like I can next:

* generate an **OpenAPI (Swagger) skeleton** for the core endpoints (`/customers`, `/invoices`, `/payments`, `/subscriptions`, `/journals`),
* produce **detailed JSON schemas** for `invoice` create/preview/issue and `payment` recording with idempotency examples,
* or design an **atomic payment allocation & reconciliation algorithm** (pseudocode + DB schema + conflict handling) for high-concurrency payment flows.

Which should I produce now?
