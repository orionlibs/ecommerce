/*
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2011.09.05 at 05:15:29 PM CEST
//
package com.hybris.cockpitng.core.config.impl.jaxb;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import org.apache.commons.lang3.StringUtils;
import org.w3c.dom.Element;

/**
 * <p>
 * Java class for context complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="context"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="context" type="{http://www.hybris.com/cockpit/config}context" minOccurs="0"/&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;any processContents='lax' namespace='##other'/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="merge" type="{http://www.hybris.com/cockpit/config}MergeAttrType" /&gt;
 *       &lt;attribute name="parent" type="{http://www.w3.org/2001/XMLSchema}string" default="auto" /&gt;
 *       &lt;attribute name="type" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="principal" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="component" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;anyAttribute processContents='skip'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "context", propOrder =
                {"context", "any"})
public class Context
{
    protected List<Context> context;
    @XmlAnyElement(lax = true)
    protected Object any;
    @XmlAttribute(name = "merge-by")
    protected String mergeBy;
    @XmlAttribute(name = "parent")
    protected String parent;
    @XmlAttribute(name = "type", required = true)
    protected String type;
    @XmlAttribute(name = "principal", required = true)
    protected String principal;
    @XmlAttribute(name = "component", required = true)
    protected String component;
    @XmlAnyAttribute
    private final Map<QName, String> otherAttributes = new HashMap<QName, String>();
    @XmlTransient
    private Context parentContext;


    @Override
    public boolean equals(final Object o)
    {
        if(this == o)
        {
            return true;
        }
        if(o == null || getClass() != o.getClass())
        {
            return false;
        }
        final Context ctx = (Context)o;
        if(component != null ? !component.equals(ctx.component) : ctx.component != null)
        {
            return false;
        }
        if(mergeBy != null ? !mergeBy.equals(ctx.mergeBy) : ctx.mergeBy != null)
        {
            return false;
        }
        if(parent != null ? !parent.equals(ctx.parent) : ctx.parent != null)
        {
            return false;
        }
        if(principal != null ? !principal.equals(ctx.principal) : ctx.principal != null)
        {
            return false;
        }
        if(type != null ? !type.equals(ctx.type) : ctx.type != null)
        {
            return false;
        }
        if(otherAttributes.size() != ((Context)o).otherAttributes.size())
        {
            return false;
        }
        for(final Map.Entry<QName, String> entry : otherAttributes.entrySet())
        {
            if(!StringUtils.equals(entry.getValue(), ctx.otherAttributes.get(entry.getKey())))
            {
                return false;
            }
        }
        return true;
    }


    @Override
    public int hashCode()
    {
        int result = mergeBy != null ? mergeBy.hashCode() : 0;
        result = 31 * result + (parent != null ? parent.hashCode() : 0);
        result = 31 * result + (type != null ? type.hashCode() : 0);
        result = 31 * result + (principal != null ? principal.hashCode() : 0);
        result = 31 * result + (component != null ? component.hashCode() : 0);
        return result;
    }


    /**
     * Gets the value of the context property.
     * <p>
     * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the
     * context property.
     * <p>
     * For example, to add a new item, do as follows:
     *
     * <pre>
     * getContext().add(newItem);
     * </pre>
     * <p>
     * Objects of the following type(s) are allowed in the list {@link Context }
     */
    public List<Context> getContext()
    {
        if(context == null)
        {
            context = new ArrayList<Context>();
        }
        return this.context;
    }


    /**
     * Gets the value of the any property.
     *
     * @return possible object is {@link Object } {@link Element }
     */
    public Object getAny()
    {
        return any;
    }


    /**
     * Sets the value of the any property.
     *
     * @param value
     *           allowed object is {@link Object } {@link Element }
     */
    public void setAny(final Object value)
    {
        this.any = value;
    }


    /**
     * Gets the value of the mergeBy property.
     *
     * @return possible object is {@link String }
     */
    public String getMergeBy()
    {
        return mergeBy;
    }


    /**
     * Sets the value of the mergeBy property.
     *
     * @param value
     *           allowed object is {@link String }
     */
    public void setMergeBy(final String value)
    {
        this.mergeBy = value;
    }


    /**
     * Gets the value of the parent property.
     *
     * @return possible object is {@link String }
     */
    public String getParent()
    {
        return parent;
    }


    /**
     * Sets the value of the parent property.
     *
     * @param value
     *           allowed object is {@link String }
     */
    public void setParent(final String value)
    {
        this.parent = value;
    }


    /**
     * Gets the value of the type property.
     *
     * @return possible object is {@link String }
     */
    public String getType()
    {
        return type;
    }


    /**
     * Sets the value of the type property.
     *
     * @param value
     *           allowed object is {@link String }
     */
    public void setType(final String value)
    {
        this.type = value;
    }


    /**
     * Gets the value of the principal property.
     *
     * @return possible object is {@link String }
     */
    public String getPrincipal()
    {
        return principal;
    }


    /**
     * Sets the value of the principal property.
     *
     * @param value
     *           allowed object is {@link String }
     */
    public void setPrincipal(final String value)
    {
        this.principal = value;
    }


    /**
     * Gets the value of the component property.
     *
     * @return possible object is {@link String }
     */
    public String getComponent()
    {
        return component;
    }


    /**
     * Sets the value of the component property.
     *
     * @param value
     *           allowed object is {@link String }
     */
    public void setComponent(final String value)
    {
        this.component = value;
    }


    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * <p>
     * the map is keyed by the name of the attribute and the value is the string value of the attribute. the map returned by
     * this method is live, and you can add new attribute by updating the map directly. Because of this design, there's no
     * setter.
     *
     * @return always non-null
     */
    public Map<QName, String> getOtherAttributes()
    {
        return otherAttributes;
    }


    public Context getParentContext()
    {
        return parentContext;
    }


    public void setParentContext(final Context parentContext)
    {
        this.parentContext = parentContext;
    }


    public void afterUnmarshal(final Unmarshaller unmarshaller, final Object parentCtx)
    {
        if(parentCtx instanceof Context)
        {
            setParentContext((Context)parentCtx);
        }
    }
}
