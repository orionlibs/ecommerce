/*
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
package de.hybris.platform.gigya.gigyauserdeleteservices.jobs;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import de.hybris.platform.amazon.media.services.S3StorageServiceFactory;
import de.hybris.platform.basecommerce.model.site.BaseSiteModel;
import de.hybris.platform.commerceservices.event.AbstractCommerceUserEvent;
import de.hybris.platform.commerceservices.event.ClosedAccountEvent;
import de.hybris.platform.core.model.user.CustomerModel;
import de.hybris.platform.core.model.user.UserModel;
import de.hybris.platform.cronjob.enums.CronJobResult;
import de.hybris.platform.cronjob.enums.CronJobStatus;
import de.hybris.platform.cronjob.model.CronJobModel;
import de.hybris.platform.gigya.gigyaservices.login.GigyaLoginService;
import de.hybris.platform.gigya.gigyaservices.model.GigyaConfigModel;
import de.hybris.platform.gigya.gigyauserdeleteservices.constants.GigyauserdeleteservicesConstants;
import de.hybris.platform.servicelayer.config.ConfigurationService;
import de.hybris.platform.servicelayer.cronjob.AbstractJobPerformable;
import de.hybris.platform.servicelayer.cronjob.PerformResult;
import de.hybris.platform.servicelayer.event.EventService;
import de.hybris.platform.servicelayer.internal.dao.GenericDao;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Cronjob that reads a list of files which are generated by CDC containing a list of customers that are deleted in CDC
 * and these customer accounts are then closed in Commerce by setting the deactivationDate value
 */
public class CloseCustomerAccountCronJobPerformable extends AbstractJobPerformable<CronJobModel>
{
    private static final Logger LOGGER = LoggerFactory.getLogger(CloseCustomerAccountCronJobPerformable.class);
    private static final String DATE_FORMAT = "yyyy-MM-dd-HH-mm-ss";
    private static final String UTF_8_ENCODING = "UTF-8";
    private static final int SUBSTR_VALUE = 4;
    private GigyaLoginService gigyaLoginService;
    private EventService eventService;
    private ConfigurationService configurationService;
    private GenericDao<GigyaConfigModel> gigyaConfigGenericDao;
    private S3StorageServiceFactory s3StorageServiceFactory;


    @Override
    public PerformResult perform(final CronJobModel cronJob)
    {
        final AmazonS3 s3Service = s3StorageServiceFactory.getS3Service(
                        configurationService.getConfiguration().getString(GigyauserdeleteservicesConstants.AWS_ACCESS_KEY),
                        configurationService.getConfiguration().getString(GigyauserdeleteservicesConstants.AWS_SECRET_ACCESS_KEY),
                        StringUtils.EMPTY);
        final String bucketId = configurationService.getConfiguration()
                        .getString(GigyauserdeleteservicesConstants.AWS_S3_BUCKET_ID);
        final String prefix = configurationService.getConfiguration()
                        .getString(GigyauserdeleteservicesConstants.AWS_S3_OBJECT_PREFIX);
        final ObjectListing objectListing = s3Service.listObjects(bucketId, prefix);
        boolean processFailed = false;
        if(objectListing != null && CollectionUtils.isNotEmpty(objectListing.getObjectSummaries()))
        {
            objectListing.getObjectSummaries().forEach(item -> processFile(cronJob, s3Service, bucketId, item));
            processFailed = cronJob.getResult() == CronJobResult.ERROR || processFailed;
        }
        return new PerformResult(processFailed ? CronJobResult.FAILURE : CronJobResult.SUCCESS, CronJobStatus.FINISHED);
    }


    /**
     * Method to process a file on S3 to read the header and then the list of entries and close the customer accounts in
     * Commerce by setting the de-activation date. Finally the processed files are renamed in S3.
     */
    protected void processFile(final CronJobModel cronJob, final AmazonS3 s3Service, final String bucketId,
                    final S3ObjectSummary s3ObjectSummary)
    {
        String line = null;
        int counter = 0;
        int uidPosition = 0;
        int timestampPosition = 0;
        final S3Object s3Object = s3Service
                        .getObject(new GetObjectRequest(s3ObjectSummary.getBucketName(), s3ObjectSummary.getKey()));
        try(final BufferedReader reader = new BufferedReader(new InputStreamReader(s3Object.getObjectContent(), UTF_8_ENCODING)))
        {
            while((line = reader.readLine()) != null)
            {
                if(counter == 0)
                {
                    //process header values of the csv file
                    counter++;
                    final String[] keys = line.split(";");
                    uidPosition = getPosition(keys, "\"uid\"");
                    timestampPosition = getPosition(keys, "\"@timestamp\"");
                }
                else
                {
                    processCustomerDeactivation(line, uidPosition, timestampPosition);
                }
            }
            cronJob.setResult(CronJobResult.SUCCESS);
        }
        catch(final IOException ioException)
        {
            LOGGER.error("Processing of the file failed", ioException);
            cronJob.setResult(CronJobResult.ERROR);
        }
        catch(final Exception e)
        {
            LOGGER.error("Processing of the file failed", e);
            cronJob.setResult(CronJobResult.ERROR);
        }
        finally
        {
            renameFileInS3Bucket(cronJob, s3Service, bucketId, s3Object.getKey());
        }
    }


    protected int getPosition(final String[] keys, final String string)
    {
        for(int i = 0; i < keys.length; i++)
        {
            if(keys[i].equals(string))
            {
                return i;
            }
        }
        return 0;
    }


    protected void renameFileInS3Bucket(final CronJobModel cronJob, final AmazonS3 s3Service, final String bucketId,
                    final String objectName)
    {
        final String formattedCurrentDate = getFormatterCurrentDate();
        final String processedFolderName = configurationService.getConfiguration()
                        .getString(GigyauserdeleteservicesConstants.AWS_S3_PROCESSED_FOLDER_NAME);
        if(cronJob.getResult().equals(CronJobResult.SUCCESS))
        {
            s3Service.copyObject(bucketId, objectName, bucketId,
                            processedFolderName + "/"
                                            + objectName.substring(0, objectName.length() - SUBSTR_VALUE)
                                            .concat(GigyauserdeleteservicesConstants.UNDERSCORE + processedFolderName
                                                            + GigyauserdeleteservicesConstants.UNDERSCORE + formattedCurrentDate + ".csv"));
            s3Service.deleteObject(bucketId, objectName);
            LOGGER.info("Processing of Close Customer Account Cron Job for Object={} successful.", objectName);
        }
        else
        {
            LOGGER.info("Processing of Close Customer Account Cron Job for Object={} failed.", objectName);
        }
    }


    protected String getFormatterCurrentDate()
    {
        return new SimpleDateFormat(DATE_FORMAT).format(new Date());
    }


    protected void processCustomerDeactivation(final String line, final int uidPosition, final int timestampPosition)
    {
        final String[] data = line.split(";");
        final String uid = data[uidPosition].replace("\"", "");
        final String time = data[timestampPosition].replace("\"", "");
        final UserModel customer = gigyaLoginService.findCustomerByGigyaUid(uid);
        if(customer != null && customer.getDeactivationDate() == null)
        {
            customer.setDeactivationDate(Date.from(Instant.parse(time)));
            modelService.save(customer);
            getEventService().publishEvent(initializeEvent(new ClosedAccountEvent(), (CustomerModel)customer));
        }
    }


    protected AbstractCommerceUserEvent initializeEvent(final AbstractCommerceUserEvent event, final CustomerModel customer)
    {
        event.setCustomer(customer);
        event.setLanguage(customer.getSessionLanguage());
        event.setCurrency(customer.getSessionCurrency());
        final List<GigyaConfigModel> gigyaConfigs = getGigyaConfigGenericDao()
                        .find(Collections.singletonMap(GigyaConfigModel.GIGYAAPIKEY, customer.getGyApiKey()));
        if(CollectionUtils.isNotEmpty(gigyaConfigs))
        {
            final GigyaConfigModel gigyaConfig = gigyaConfigs.get(0);
            if(CollectionUtils.isNotEmpty(gigyaConfig.getSites()))
            {
                final BaseSiteModel baseSite = gigyaConfig.getSites().iterator().next();
                event.setBaseStore(baseSite.getStores().get(0));
                event.setSite(baseSite);
            }
        }
        return event;
    }


    public EventService getEventService()
    {
        return eventService;
    }


    public void setEventService(final EventService eventService)
    {
        this.eventService = eventService;
    }


    public GigyaLoginService getGigyaLoginService()
    {
        return gigyaLoginService;
    }


    public void setGigyaLoginService(final GigyaLoginService gigyaLoginService)
    {
        this.gigyaLoginService = gigyaLoginService;
    }


    public ConfigurationService getConfigurationService()
    {
        return configurationService;
    }


    public void setConfigurationService(final ConfigurationService configurationService)
    {
        this.configurationService = configurationService;
    }


    public GenericDao<GigyaConfigModel> getGigyaConfigGenericDao()
    {
        return gigyaConfigGenericDao;
    }


    public void setGigyaConfigGenericDao(final GenericDao<GigyaConfigModel> gigyaConfigGenericDao)
    {
        this.gigyaConfigGenericDao = gigyaConfigGenericDao;
    }


    public S3StorageServiceFactory getS3StorageServiceFactory()
    {
        return s3StorageServiceFactory;
    }


    public void setS3StorageServiceFactory(final S3StorageServiceFactory s3StorageServiceFactory)
    {
        this.s3StorageServiceFactory = s3StorageServiceFactory;
    }
}
