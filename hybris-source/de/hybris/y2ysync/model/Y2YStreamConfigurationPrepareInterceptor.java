package de.hybris.y2ysync.model;

import de.hybris.deltadetection.model.StreamConfigurationContainerModel;
import de.hybris.platform.catalog.CatalogTypeService;
import de.hybris.platform.core.model.type.AttributeDescriptorModel;
import de.hybris.platform.core.model.type.ComposedTypeModel;
import de.hybris.platform.core.model.type.RelationDescriptorModel;
import de.hybris.platform.core.model.type.RelationMetaTypeModel;
import de.hybris.platform.servicelayer.interceptor.InterceptorContext;
import de.hybris.platform.servicelayer.interceptor.InterceptorException;
import de.hybris.platform.servicelayer.interceptor.PrepareInterceptor;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.y2ysync.deltadetection.InfoExpressionGenerator;
import java.util.Objects;
import java.util.stream.Collectors;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Required;

public class Y2YStreamConfigurationPrepareInterceptor implements PrepareInterceptor<Y2YStreamConfigurationModel>
{
    private static final String CTG_AWARE_ITEM_QUERY = "{%s}=?catalogVersion";
    private static final String RELATED_ITEM_QUERY = "{item.%s} IN ({{ SELECT {p.PK} FROM {%s AS p} WHERE {p.%s}=?catalogVersion }})";
    private CatalogTypeService catalogTypeService;
    private InfoExpressionGenerator infoExpressionGenerator;
    private ModelService modelService;


    public void onPrepare(Y2YStreamConfigurationModel model, InterceptorContext ctx) throws InterceptorException
    {
        setAutoGeneratedAttributes(model);
    }


    private void setAutoGeneratedAttributes(Y2YStreamConfigurationModel model)
    {
        if(shouldGenerateWhereClause(model))
        {
            generateWhereClause(model);
        }
        if(shouldGenerateInfoExpression(model))
        {
            generateInfoExpression(model);
        }
        generateDataHubTypeIfNeeded(model);
    }


    private void generateDataHubTypeIfNeeded(Y2YStreamConfigurationModel model)
    {
        if(this.modelService.isNew(model))
        {
            if(StringUtils.isBlank(model.getDataHubType()) && model.getItemTypeForStream() != null)
            {
                String streamTypeCode = model.getItemTypeForStream().getCode();
                StreamConfigurationContainerModel container = model.getContainer();
                if(container != null)
                {
                    model.setDataHubType(container.getId() + "_" + container.getId());
                }
                else
                {
                    model.setDataHubType(streamTypeCode);
                }
            }
        }
    }


    private boolean shouldGenerateWhereClause(Y2YStreamConfigurationModel model)
    {
        return (model.getItemTypeForStream() != null && model.getAutoGenerateWhereClause().booleanValue() &&
                        StringUtils.isBlank(model.getWhereClause()));
    }


    private void generateWhereClause(Y2YStreamConfigurationModel model)
    {
        String query = getWhereClauseQuery(model.getItemTypeForStream());
        if(StringUtils.isNotBlank(query))
        {
            model.setWhereClause(query);
        }
    }


    private boolean shouldGenerateInfoExpression(Y2YStreamConfigurationModel model)
    {
        return (model.getItemTypeForStream() != null && model.getAutoGenerateInfoExpression().booleanValue() &&
                        StringUtils.isBlank(model.getInfoExpression()));
    }


    private void generateInfoExpression(Y2YStreamConfigurationModel model)
    {
        String infoExpression = getInfoExpression(model.getItemTypeForStream());
        if(infoExpression != null)
        {
            model.setInfoExpression(infoExpression);
        }
    }


    private String getInfoExpression(ComposedTypeModel itemTypeForStream)
    {
        return this.infoExpressionGenerator.getInfoExpressionForType(itemTypeForStream.getCode());
    }


    private String getWhereClauseQuery(ComposedTypeModel itemTypeForStream)
    {
        String query;
        if(this.catalogTypeService.isCatalogVersionAwareType(itemTypeForStream))
        {
            String ctgVerAttr = this.catalogTypeService.getCatalogVersionContainerAttribute(itemTypeForStream.getCode());
            query = String.format("{%s}=?catalogVersion", new Object[] {ctgVerAttr});
        }
        else
        {
            query = itemTypeForStream.getDeclaredattributedescriptors().stream().filter(this::isRelation).map(this::getQueryForRelation).filter(Objects::nonNull).collect(Collectors.joining(" OR "));
        }
        return query;
    }


    private String getQueryForRelation(AttributeDescriptorModel ad)
    {
        RelationDescriptorModel rd = (RelationDescriptorModel)ad;
        RelationMetaTypeModel relationType = rd.getRelationType();
        if(isTargetPartOf(rd) && this.catalogTypeService.isCatalogVersionAwareType(relationType.getSourceType()))
        {
            RelationDescriptorModel relAttribute = relationType.getTargetAttribute();
            String ctgVerAttr = this.catalogTypeService.getCatalogVersionContainerAttribute(relationType
                            .getSourceType().getCode());
            return
                            String.format("{item.%s} IN ({{ SELECT {p.PK} FROM {%s AS p} WHERE {p.%s}=?catalogVersion }})", new Object[] {relAttribute.getQualifier(), relationType.getSourceType().getCode(), ctgVerAttr});
        }
        return null;
    }


    private boolean isTargetPartOf(RelationDescriptorModel rd)
    {
        if(rd.getIsSource().booleanValue() || rd.getRelationType().getSourceAttribute() == null)
        {
            return false;
        }
        return rd.getRelationType().getSourceAttribute().getPartOf().booleanValue();
    }


    private boolean isRelation(AttributeDescriptorModel ad)
    {
        return ad instanceof RelationDescriptorModel;
    }


    @Required
    public void setCatalogTypeService(CatalogTypeService catalogTypeService)
    {
        this.catalogTypeService = catalogTypeService;
    }


    @Required
    public void setInfoExpressionGenerator(InfoExpressionGenerator infoExpressionGenerator)
    {
        this.infoExpressionGenerator = infoExpressionGenerator;
    }


    @Required
    public void setModelService(ModelService modelService)
    {
        this.modelService = modelService;
    }
}
